<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 1. 环境变量引入 -->
	<bean id="envPropertyLocator"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="fileEncoding" value="UTF-8"></property>
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:app.properties</value>
			</list>
		</property>
	</bean>

	<!-- 2. 页面需要用到的配置 -->
	<util:map id="pageConfig">
		<entry key="resources.path" value="${resources.path}"></entry>
	</util:map>

	<!-- 3. 国际化资源配置 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 国际化信息所在的文件名 -->
		<property name="basename" value="message" />
		<!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称 -->
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	
	
	<!-- 4, 数据源配置 -->
	<!-- 
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:sqlmap/sqlmap-mapping*.xml" />
		<property name="configLocation" value="classpath:sqlmap/ibatis-default-user.xml"></property>
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean> -->
	<!-- end -->


	<!-- 5, 事务配置 -->
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="config*" propagation="REQUIRED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="allManagerMethod"
			expression="execution(* org.yy.user..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod" />
	</aop:config>
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="txManager"
		proxy-target-class="true" /> -->
	<!-- end -->


	<!-- 6, 性能监控日志 -->
	<!-- <bean id="perf4jInterceptor" class="org.yy.framework.base.log.Perf4jInterceptor"></bean> 
		<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> 
		<property name="beanNames"> <list> <value>*Service</value> </list> </property> 
		<property name="interceptorNames"> <list> <value>perf4jInterceptor</value> 
		</list> </property> </bean> -->
	
	
	<!-- 7, 缓存配置 -->
	<!-- 
		@Caching(put = { @CachePut(value = "cacheName1", key = "'user.' + #userinfo.userID"),
			@CachePut(value = "cacheName1", key = "'user.' + #userinfo.mobile") })
		public UserInfo insertUser(UserInfo userinfo) {
			sqlSession.insert("user.INSERTUSER", userinfo);
			return userinfo;
		}
		/**
		 * 删除用户
		 */
		@Caching(evict = { @CacheEvict(value = "cacheName1", key = "'user.' + #userinfo.userID"),
				@CacheEvict(value = "cacheName1", key = "'user.' + #userinfo.mobile") })
		public int deleteUser(UserInfo userinfo) {
			return sqlSession.delete("user.DELETEUSER", userinfo);
		}
		/**
		 * 更新用户
		 */
		@Caching(put = { @CachePut(value = "cacheName1", key = "'user.' + #userinfo.userID"),
				@CachePut(value = "cacheName1", key = "'user.' + #userinfo.mobile") })
		public UserInfo updateUser(UserInfo userinfo) {
			sqlSession.update("user.UPDATEUSER", userinfo);
			return userinfo;
		}
	
		/**
		 * 查找用户
		 */
		@Cacheable(value = "cacheName1", key = "'user.' + #mobile")
		public UserInfo findUser(String mobile) {
			return sqlSession.selectOne("user.SELECTUSER_BY_MOBILE", mobile);
		}
	
		/**
		 * 查找用户
		 */
		@Cacheable(value = "cacheName1", key = "'user.' + #userID")
		public UserInfo findUser(Long userID) {
			return sqlSession.selectOne("user.SELECTUSER_BY_ID", userID);
		}
	
		/**
		 * 查找用户
		 */
		@Cacheable(value = "cacheName1", key = "'user.' + #userInfoDTO.hashCode()")
		public ResultDto<UserInfo> findUser(UserInfoDTO userInfoDTO) {
			try {
				return findBypagination("user.SELECTUSER_BY_DTO", userInfoDTO);
			} catch (SQLException e) {
				throw new RuntimeException(e);
			}
		}
	 -->	
	<!-- 开启缓存 -->
	<!-- 
	<cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true" />
	<bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">  
		<constructor-arg>
			<list>
				<bean class="java.net.InetSocketAddress">
					<constructor-arg value="127.0.0.1" />
					<constructor-arg value="11211" />
				</bean>
			</list>
		</constructor-arg>
		<property name="connectionPoolSize" value="20"></property>
	</bean>
	<bean id="memcachedClient" factory-bean="memcachedClientBuilder" factory-method="build" destroy-method="shutdown" />
	<bean id="cacheManager" class="org.yy.cache.client.MemcachedCacheManager">
		<property name="caches">
			<set>
				<bean class="org.yy.cache.client.MemcachedCache" p:client-ref="memcachedClient" p:name="cacheName1" p:exp="86400" />
				<bean class="org.yy.cache.client.MemcachedCache" p:client-ref="memcachedClient" p:name="cacheName2" p:exp="3600" />
			</set>
		</property>
		<property name="transactionAware" value="true"></property>
	</bean>-->
	<!-- 是否支持事务回滚，默认为false -->
	
	
	<!-- 8, 防重复提交token -->
	<!-- 
	页面
	<%@ taglib uri="/yy"  prefix="yy"%>
	<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
	<html>
	<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title></title>
	</head>
	<body>
		<form action="/token.do" method="post">
			<yy:token/>
			<input type="submit" value="submit">
		</form>
	</body>
	</html>
	java:
	@Controller
	public class TokenController extends AbstractTokenController {
	
		@Override
		protected void setModuleName() {
	
		}
	
		@RequestMapping("/token")
		public ModelAndView token() {
			if (tokenService.validToken(tokenService.fetchToken()))
				return processSuccess("jsp/tiles", "123");
			else {
				return processSuccess("jsp/contact", new User());
			}
		}
	
	}
	 -->
	<!-- 
	<bean id="tokenStore" class="org.yy.framework.base.token.SessionTokenStore"></bean>
	<bean id="tokenHandler" class="org.yy.framework.base.token.WebTokenHandler">
		<constructor-arg ref="tokenStore"></constructor-arg>
	</bean> -->
	
	
	<!-- 9, MQ配置 -->
	<!-- 配置JMS连接工厂 -->
	<!--  
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="failover:(tcp://localhost:61616)" />
	</bean>-->
	<!-- 定义消息队列（Queue） -->
	<!-- <bean id="queueDestination1" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue1</value>
		</constructor-arg>
	</bean>-->
	<!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
	<!--<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="queueDestination1" />
		<property name="receiveTimeout" value="10000" />
	</bean>-->



	<!-- 定义消息队列（Queue），我们监听一个新的队列，queue2 -->
	<!--<bean id="queueDestination2" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue2</value>
		</constructor-arg>
	</bean>-->
	<!-- 配置消息队列监听者（Queue），代码下面给出，只有一个onMessage方法 -->
	<!--bean id="queueMessageListener" class="org.yy.demo.msg.QueueListener" />-->
	<!-- 消息监听容器（Queue），配置连接工厂，监听的队列是queue2，监听器是上面定义的监听器 -->
	<!--<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination2" />
		<property name="messageListener" ref="queueMessageListener" />
	</bean>-->



	<!-- 定义消息主题（Topic） -->
	<!-- <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg>
			<value>guo_topic</value>
		</constructor-arg>
	</bean>-->
	<!-- 配置JMS模板（Topic），pubSubDomain="true" -->
	<!-- <bean id="topicJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="topicDestination" />
		<property name="pubSubDomain" value="true" />
		<property name="receiveTimeout" value="10000" />
	</bean>-->
	<!-- 消息主题监听者 和 主题监听容器 可以配置多个，即多个订阅者 -->
	<!-- 消息主题监听者(Topic) -->
	<!-- <bean id="topicMessageListener" class="org.yy.demo.msg.TopicListener" />-->
	<!-- 主题监听容器 （Topic） -->
	<!-- <bean id="topicJmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="topicDestination" />
		<property name="messageListener" ref="topicMessageListener" />
	</bean>-->
	


</beans>