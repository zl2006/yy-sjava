<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd   
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd   
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 1. mvc,context基础配置 -->
	<mvc:annotation-driven />
	<context:annotation-config />
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />


	<!-- 2. 框架中基础MVC控制器 -->
	<context:component-scan base-package="org.yy.framework.base.controller"></context:component-scan>


	<!-- 3. kaptcha验证码配置 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg type="java.util.Properties">
					<props>
						<prop key="kaptcha.image.width">100</prop>
						<prop key="kaptcha.image.height">50</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<!-- 4. 处理Controller中使用@RequestBody, @ResponseBody标识数据 -->
	<bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- fastjson方式 <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"> 
		</bean> -->


	<!-- 5. 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json返回json格式数据 /blog/1.xml返回xml格式数据 
		/blog.do返回jsp -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">

		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="false" />
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 在没有扩展名时即: "/user/1" 时的默认展现形式 -->
		<property name="defaultContentType" value="text/html" />
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>

		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/pages/" />
					<property name="suffix" value=".jsp"></property>
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.yy.framework.base.view.FrameworkJacksonJsonView">
					<!-- 只处理非空值 -->
					<property name="objectMapper">
						<bean class="com.fasterxml.jackson.databind.ObjectMapper">
							<property name="serializationInclusion">
								<value type="com.fasterxml.jackson.annotation.JsonInclude$Include">NON_NULL</value>
							</property>
						</bean>
					</property>
				</bean>
			</list>
		</property>
	</bean>


	<!-- 6.上传拦截，如最大上传值及最小上传值,如果需要文件上传可以继承它并设置临时目录等 -->
	<bean id="absMultipartResolver" abstract="true">
		<property name="maxUploadSize" value="100000" /><!-- 设置允许上传的最大文件大小，以字节为单位计算。当设为-1时表示无限制，默认是-1。 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxInMemorySize" value="10240"></property><!--设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240。 -->
	</bean>


	<!-- 7. 不包含Spring框 -->
	<bean id="exceptionResolver" class="org.yy.framework.base.exception.AppExceptionResolver">
	</bean>

	<!-- 8.tiles页面模板配置 -->
	<!-- 
		一、模板定义
		<tiles-definitions>
		    <definition name="base.definition" template="/templates/layout.jsp">
		        <put-attribute name="title" value="" type="string" />
		        <put-attribute name="header" value="/templates/header.jsp" />
		        <put-attribute name="footer" value="/templates/footer.jsp" />
		        <put-attribute name="menu" value="/templates/menu.jsp" />
		        <put-attribute name="body" value="" />
		    </definition>
		
		    <definition name="tiles/*" extends="base.definition">
		        <put-attribute name="body" value="/{1}.jsp" />
		    </definition>
		</tiles-definitions> 
		二、使用模板
		@RequestMapping("/tiles")
		public String testTiles() {
			return "tiles/contact";
		}
	 -->
	<!-- 
	<bean id="tilesConfigurer"
        class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/tiles-config.xml</value>
            </list>
        </property>
    </bean>
     -->
</beans>